mod_list <- rep(list(),length(minbucket))
for (i in 1:length(minbucket)){
mod_dt <- train(Class~., data=traindata, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[i])
mod_list[i] <- mod_dt
}
mod_list
mod_list <- list()
result <- vector("list", length = length(minbucket))
for (i in 1:length(minbucket)){
mod_dt <- train(Class~., data=traindata, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[i])
result[i] <- mod_dt
}
print(result)
rm(mod_list)
train(Class~., data=traindata, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[1]
)
for (i in (1:length(minbucket))){
result[i] <- train(Class~., data=traindata, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[1])
}
result <- list()
for (i in (1:length(minbucket))){
mod_dt <- train(Class~., data=traindata, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[1])
result[i] <- mod_dt
}
for (i in 1:(length(minbucket))){
mod_dt <- train(Class~., data=traindata, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[1])
result[i] <- mod_dt
}
size(mod_dt)
for (i in 1:(length(minbucket))){
mod_dt[i] <- train(Class~., data=traindata, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[1])
}
str(mod_dt)
result <- rep(list(),23)
result <- list()
length(result) <- 23
for (i in 1:1){
mod_dt <- train(Class~., data=traindata, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[1])
result
}
print(result)
result <- matrix(NA,3,23)
for (i in 1:1){
mod_dt <- train(Class~., data=traindata, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[1])
result <- mod_dt
}
print(result)
result <- rep(result,length(minbucket))
rm(result)
result <- list()
length(result) <- 23
result
<- rep(result,length(minbucket))
result <- rep(result,length(minbucket))
result
rm(result)
result <- list()
length(result) <- 23
result <- rep(list(),3)
length(result) <- 23
result <- rep(list(),3)
result
result <- list(result)
for (i in 1:(length(minbucket))){
mod_dt <- train(Class~., data=traindata, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[1])
result <- mod_dt
}
result <- rep(list(),3)
length(result) <- 23
result <- list(result)
result
result <- rep(list(result),3)
result
for (i in 1:(length(minbucket))){
mod_dt <- train(Class~., data=traindata, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[1])
result[i] <- mod_dt
}
result
result <- list()
length(result) <- 23
for (i in 1:(length(minbucket))){
mod_dt <- train(Class~., data=traindata, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[1])
result <- mod_dt
}
print(result)
result <- list()
length(result) <- 23
result <- rep(list(result),3)
for (i in 1:(length(minbucket))){
mod_dt <- train(Class~., data=traindata, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[i])
result <- mod_dt
}
for (i in 1:(length(minbucket))){
mod_dt <- train(Class~., data=traindata, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[i])
result[i] <- mod_dt
}
mod_dt_1 <- train(Class~., data=traindata, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[1])
mod_dt_2 <- train(Class~., data=traindata, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[2])
mod_dt_3 <- train(Class~., data=traindata, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[3])
print(mod_dt_1)
print(mod_dt_1,mod_dt_2)
plot(mod_dt_1)
par(mfcol=3)
par(3)
par(mcol=3)
par(mrrow=c(1,3))
par(mfrow=c(1,3))
plot(mod_dt_1)
plot(mod_dt_2)
par(mfrow=c(1,3))
plot(mod_dt_1)
par(mfrow=c(3,1))
plot(mod_dt_1)
par(mfrow=c(3,1))
plot(mod_dt_1)
plot(mod_dt_2)
par(mfrow=c(1,2))
plot(mod_dt_1)
plot(mod_dt_2)
plot(mod_dt_3)
plot(mod_dt_1)
plot(mod_dt_2)
library("graphics", lib.loc="C:/Program Files/R/R-3.5.1/library")
par(mfrow=c(1,3))
plot(mod_dt_1)
plot(mod_dt_2)
plot(mod_dt_3)
library(e1071)
mod_dt_1
mod_dt_2
mod_dt_3
predict_dt <- predict(mod_dt_1,testdata)
conf_dt <-confusionMatrix(predict_dt, testlabel)
print(conf_dt)
conf_dt$â€¢table
conf_dt$table
conf_dt$overall
print(conf)
predict_gaussian <-predict(mod_gaussian, testdata, na.action = na.pass)
conf <-confusionMatrix(predict_gaussian, testlabel)
conf_ga <-confusionMatrix(predict_gaussian, testlabel)
print(conf_ga)
predict_polynomial <-predict(mod_polynomial, testdata, na.action = na.pass)
conf_pol <-confusionMatrix(predict_polynomial, testlabel)
print(conf_pol)
conf_pol$byClass
conf_pol$dots
conf_pol$mode
print(conf_rf)
print(conf_gbm)
predicted_test
predicted_class
require(lqa)
lambda=exp (seq (-6, 1, length = 6))
print(lambda) #check what they are
lambdas=list(lambda,1)
cvFused=cv.lqa(trainlabel,traindata,lambda.candidates = lambdas, intercept = FALSE,
family=binomial(), penalty.family=fused.lasso ,n.fold=10,loss.func = "aic.loss")
rm(data)
View(traindata)
traindata_lqa <- traindata[-"Class"]
traindata_lqa <- traindata[,-"Class"]
traindata_lqa <- traindata[,-c("Class")]
traindata_lqa <- traindata[Class:= NULL]
traindata_lqa <- traindata[Class=: NULL]
library(data.table)
traindata_lqa <- traindata[Class := NULL]
traindata_lqa <- traindata[,-c("Class")]
View(traindata)
traindata_lqa <- traindata$Class = NULL
traindata_lqa <- traindata[,Class := NULL]
traindata_lqa <- traindata[,Class := NULL]
traindata_lqa <- traindata[,"Class" := NULL]
traindata_lqa <- traindata[,"Class" =: NULL]
traindata_lqa <- traindata["Class" := NULL]
traindata_lqa <- traindata[,-(ncol(traindata))]
cvFused=cv.lqa(trainlabel,traindata_lqa,lambda.candidates = lambdas, intercept = FALSE,
family=binomial(), penalty.family=fused.lasso ,n.fold=10,loss.func = "aic.loss")
for (i in 1:length(trainlabel)){
if (trainlabel[i] == "X0")
trainlabel_lqa[i] = 0
else
trainlabel_lqa[i] = 1
}
trainlabel_lqa <- trainlabel
for (i in 1:length(trainlabel)){
if (trainlabel[i] == "X0")
trainlabel_lqa[i] = 0
else
trainlabel_lqa[i] = 1
}
cvFused=cv.lqa(trainlabel_lqa,traindata_lqa,lambda.candidates = lambdas, intercept = FALSE,
family=binomial(), penalty.family=fused.lasso ,n.fold=10,loss.func = "aic.loss")
str(trainlabel_lqa)
for (i in 1:length(trainlabel)){
if (trainlabel[i] == "X0")
trainlabel_lqa[i] = as.numeric(0)
else
trainlabel_lqa[i] = as.numeric(1)
}
str(trainlabel_lqa)
trainlabel_lqa <- as.numeric(trainlabel_lqa)
str(trainlabel_lqa)
cvFused=cv.lqa(trainlabel_lqa,traindata_lqa,lambda.candidates = lambdas, intercept = FALSE,
family=binomial(), penalty.family=fused.lasso ,n.fold=10,loss.func = "aic.loss")
cvFused$lambda.opt
lambda
cvFused$best.obj$coefficients
testdata
prediction_lqa <- predict.lqa(cvFused$best.obj,new.x = testdata)
predicted_class <- prediction$lqa.obj$y
predicted_class <- prediction_lqa$lqa.obj$y
predicted_class
testlabel_lqa <- trainlabel
testlabel_lqa <- trainlabel
for (i in 1:length(testlabel)){
if (testlabel[i] == "X0")
testlabel_lqa[i] = 0
else
testlabel_lqa[i] = 1
}
testlabel_lqa <- as.numeric(testlabel_lqa)
testlabel_lqa
testlabel
testlabel_lqa
conf_lqa <-confusionMatrix(prediction_lqa, testlabel)
predicted_class <- as.factor(predicted_class)
testlabel_lqa <- as.factor(testlabel_lqa)
conf_lqa <-confusionMatrix(predicted_class, testlabel_lqa)
print(conf_lqa)
lambda=exp (seq (-3, 1, length = 6))
print(lambda) #check what they are
lambda=exp (seq (-3, 3, length = 6))
print(lambda) #check what they are
lambdas=list(lambda,1)
traindata_lqa <- traindata[,-(ncol(traindata))]
trainlabel_lqa <- trainlabel
for (i in 1:length(trainlabel)){
if (trainlabel[i] == "X0")
trainlabel_lqa[i] = 0
else
trainlabel_lqa[i] = 1
}
testlabel_lqa <- trainlabel
for (i in 1:length(testlabel)){
if (testlabel[i] == "X0")
testlabel_lqa[i] = 0
else
testlabel_lqa[i] = 1
}
testlabel_lqa <- as.numeric(testlabel_lqa)
testlabel_lqa <- trainlabel
for (i in 1:length(testlabel)){
if (testlabel[i] == "X0")
testlabel_lqa[i] = 0
else
testlabel_lqa[i] = 1
}
is.na(testlabel_lqa)
sum(is.na(testlabel_lqa))
cvFused=cv.lqa(trainlabel_lqa,traindata_lqa,lambda.candidates = lambdas, intercept = FALSE,
family=binomial(), penalty.family=fused.lasso ,n.fold=10,loss.func = "aic.loss")
trainlabel_lqa <- as.numeric(trainlabel_lqa)
cvFused=cv.lqa(trainlabel_lqa,traindata_lqa,lambda.candidates = lambdas, intercept = FALSE,
family=binomial(), penalty.family=fused.lasso ,n.fold=10,loss.func = "aic.loss")
cvFused$lambda.opt
prediction_lqa <- predict.lqa(cvFused$best.obj,new.x = testdata)
predicted_class <- as.factor(prediction_lqa$lqa.obj$y)
testlabel_lqa <- as.factor(testlabel_lqa)
conf_lqa <-confusionMatrix(predicted_class, testlabel_lqa)
testlabel_lqa <- testlabel
for (i in 1:length(testlabel)){
if (testlabel[i] == "X0")
testlabel_lqa[i] = 0
else
testlabel_lqa[i] = 1
}
warnings()
rm(testlabel_lqa)
testlabel_lqa <- testlabel
for (i in 1:length(testlabel)){
if (testlabel[i] == "X0")
testlabel_lqa[i] = 0
else
testlabel_lqa[i] = 1
}
testlabel_lqa
testlabel_lqa <- testlabel
testlabel_lqa
conf_lqa <-confusionMatrix(predicted_class, testlabel)
prediction_lqa <- predict.lqa(cvFused$best.obj,new.x = testdata)
prediction_lqa$lqa.obj$y
predicted_class <- make.names(prediction_lqa$lqa.obj$y)
predicted_class <- as.factor(make.names(prediction_lqa$lqa.obj$y))
prediction_lqa <- predict.lqa(cvFused$best.obj,new.x = testdata)
predicted_class <- as.factor(make.names(prediction_lqa$lqa.obj$y))
conf_lqa <-confusionMatrix(predicted_class, testlabel)
length(predicted_class)
cvFused$best.obj
mod_lqa <- cvFused$best.obj
prediction_lqa <- predict(mod_lqa,testdata)
prediction_lqa
length(prediction_lqa)
str(prediction_lqa)
prediction_lqa <- predict(mod_lqa,testdata)
prediction_lqa
mod_lqa
prediction_lqa <- predict(cvFused$best.obj$coefficients,testdata)
dataset3[ncol(dataset3)]
unique(dataset3[ncol(dataset3)])
View(dataset3)
dataset3[ncol(dataset3)]
unique(dataset3$Class
##############################################################
require(lqa)
lambda=exp (seq (-3, 3, length = 6))
print(lambda) #check what they are
lambdas=list(lambda,1)
traindata_lqa <- traindata[,-(ncol(traindata))]
trainlabel_lqa <- trainlabel
for (i in 1:length(trainlabel)){
if (trainlabel[i] == "X0")
trainlabel_lqa[i] = 0
else
trainlabel_lqa[i] = 1
}
trainlabel_lqa <- as.numeric(trainlabel_lqa)
cvFused=cv.lqa(trainlabel_lqa,traindata_lqa,lambda.candidates = lambdas, intercept = FALSE,
family=binomial(), penalty.family=fused.lasso ,n.fold=10,loss.func = "aic.loss")
print(conf_gbm)
unique(dataset3$Class)
ncol(dataset3)
dataset3[,ncol(dataset3)]
a <- dataset3[,ncol(dataset3)]
unique(a)
sum(a==0)
sum(a==1)
rm(a)
plot(mod_rf)
View(Grid_Poly)
View(dataset4)
source("fit_function.R")
source("fit_function.R")
fit(dataset4,CARAVAN)
fit(dataset4,"CARAVAN")
fit <- function(data){
temp = data
train_index <- sample(1:nrow(temp), 0.75 * nrow(temp))
test_index <- setdiff(1:nrow(temp), train_index)
train_data <- temp[train_index, -(ncol(temp))]
train_label <- temp[train_index, ncol(temp)]
test_data <- temp[test_index, -(ncol(temp))]
test_label <- temp[test_index, ncol(temp)]
#################################################################################################################
control <- trainControl(method="cv", number=10, search="grid")
minbucket = c(2,3,5)
Grid <- expand.grid(cp = c(0.001,0.003,0.005,0.01,0.05,0.1)) #minbucket iÃ§in bir dÃ¶ngÃ¼ yazÄ±labilir.
Mod_dt_1 <- train(Class~., data=train_data, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[1])
Mod_dt_2 <- train(Class~., data=train_data, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[2])
Mod_dt_3 <- train(Class~., data=train_data, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[3])
return(Mod_dt_1)
return(Mod_dt_2)
return(Mod_dt_3)
Pred_dt <- Pred(Mod_dt_1,test_data)
Confusiondt <-confusionMatrix(Pred_dt, test_label)
return(Confusiondt)
##################################################################################################################
train_label <- as.factor(train_label)
train_label <- make.names(train_label)
test_label <- make.names(test_label)
test_label <- as.factor(test_label)
train_data$Class <- train_label
Grid_Poly <- expand.grid(degree=c(1:3),scale=1,C=10^c(-1:1))
Grid_Rad <- expand.grid(.C = c(0.01,0.1,1, 10), .sigma = c(0.01,0.02,0.05) )
Mod_polynomial <- train(Class~., data=train_data, method="svmPoly", trControl = control,
tuneGrid = Grid_Poly,
preProcess=c("scale","center"),
na.action = na.omit)
Mod_gaussian <- train(Class~., data=train_data, method="svmRadial", trControl = control, tuneGrid = Grid_Rad)
return(Mod_polynomial)
return(Mod_gaussian)
Pred_gaussian <-Pred(Mod_gaussian, test_data, na.action = na.pass)
Confusionga <-confusionMatrix(Pred_gaussian, test_label)
return(Confusionga)
Pred_polynomial <-Pred(Mod_polynomial, test_data, na.action = na.pass)
Confusionpol <-confusionMatrix(Pred_polynomial, test_label)
return(Confusionpol)
###################################################################################################################
tunegrid <- expand.grid(.mtry=c(5:10))
Mod_rf <- train(Class~., data=train_data, method="rf", tuneGrid=tunegrid, trControl=control, ntree=500,nodesize=5)
return(Mod_rf)
Pred_rf <- Pred(Mod_rf, test_data)
Confusionrf <-confusionMatrix(Pred_rf, test_label)
return(Confusionrf)
####################################################################################################################
control <- trainControl(method="cv", number=3, search="grid")
grid <- expand.grid(n.trees = seq(300,500,100),
interaction.depth = seq(3,5),
shrinkage = c(0.5,0.1,0.05),
n.minobsinnode =10)
Mod_gbm <- train(Class~., data=train_data, method="gbm", tuneGrid=grid, trControl=control)
return(Mod_gbm)
Pred_gbm <- Pred(Mod_gbm, test_data,na.action = na.omit)
Confusiongbm <-confusionMatrix(Pred_gbm, test_label)
return(Confusiongbm)
}
print(conf_gbm)
dataset4$CARAVAN <- dataset4$Class
View(dataset4)
dataset4 <- read.table(file="coil2000.csv", header= T,  sep=",")
dataset4$Class <- dataset4$CARAVAN
View(dataset4)
dataset4[,-c("CARAVAN")]
dataset4[,-86]
dataset4 <- dataset4[,-86]
source("fit_function.R")
fit(dataset4)
View(dataset4)
str(traindata$Class)
source("fit_function.R")
fit(dataset4)
View(dataset3)
source("fit_function.R")
fit(dataset4)
source("fit_function.R")
fit(dataset4)
fit_4 <- fit(dataset4)
temp = dataset4
train_index <- sample(1:nrow(temp), 0.75 * nrow(temp))
test_index <- setdiff(1:nrow(temp), train_index)
train_data <- temp[train_index, -(ncol(temp))]
train_label <- temp[train_index, ncol(temp)]
test_data <- temp[test_index, -(ncol(temp))]
test_label <- temp[test_index, ncol(temp)]
train_label <- as.factor(train_label)
train_label <- make.names(train_label)
test_label <- make.names(test_label)
test_label <- as.factor(test_label)
train_data$Class <- train_label
control <- trainControl(method="cv", number=10, search="grid")
minbucket = c(2,3,5)
Grid <- expand.grid(cp = c(0.001,0.003,0.005,0.01,0.05,0.1)) #minbucket iÃ§in bir dÃ¶ngÃ¼ yazÄ±labilir.
Mod_dt_1 <- train(Class~., data=train_data, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[1])
Mod_dt_2 <- train(Class~., data=train_data, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[2])
Mod_dt_3 <- train(Class~., data=train_data, method="rpart", tuneGrid=Grid, trControl=control, minbucket=minbucket[3])
Mod_dt_1
Mod_dt_2
Mod_dt_3
Pred_dt <- predict(Mod_dt_3,test_data)
Confusiondt <-confusionMatrix(Pred_dt, test_label)
Confusiondt
Pred_dt <- predict(Mod_dt_1,test_data)
Confusiondt <-confusionMatrix(Pred_dt, test_label)
Confusiondt
sum(train_label==X0)
sum(train_label=="X0")
sum(train_label=="X1")
Grid_Poly <- expand.grid(degree=c(1:3),scale=1,C=10^c(-1:1))
Grid_Rad <- expand.grid(.C = c(0.01,0.1,1, 10), .sigma = c(0.01,0.02,0.05) )
Mod_polynomial <- train(Class~., data=train_data, method="svmPoly", trControl = control,
tuneGrid = Grid_Poly,
preProcess=c("scale","center"),
na.action = na.omit)
Mod_polynomial <- train(Class~., data=train_data, method="svmPoly", trControl = control,
tuneGrid = Grid_Poly,
na.action = na.omit)
prediction_lqa <- predict(cvFused$best.obj$coefficients,new.x = testdata)
prediction_lqa <- predict(cvFused$best.obj,new.x = testdata)
prediction_lqa
length(predict.lqa())
length(prediction_lqa)
prediction_lqa$new.y
prediction_lqa$lqa.obj
prediction_lqa <- predict.lqa(cvFused$best.obj,new.x = testdata)
prediction_lqa
predicted_class <- as.factor(make.names(prediction_lqa$lqa.obj$y))
conf_lqa <-confusionMatrix(predicted_class, testlabel)
length(predicted_class)
prediction_lqa <- predict.lqa(testdata, lambda = cvFused$lambda.opt, intercept =F,
family=binomial(), penalty.family=fused.lasso ,n.fold=10,loss.func = "aic.loss")
prediction_lqa <- predict.lqa(data = testdata, lambda = cvFused$lambda.opt, intercept =F,
family=binomial(), penalty.family=fused.lasso ,n.fold=10,loss.func = "aic.loss")
prediction_lqa <- lqa(data = testdata, lambda = cvFused$lambda.opt, intercept =F,
family=binomial(), penalty.family=fused.lasso ,n.fold=10,loss.func = "aic.loss")
prediction_lqa <- lqa(data = testdata,family=binomial(),penalty=fused.lasso(cvFused$best.obj))
prediction_lqa <- lqa(data = testdata,family=binomial(),penalty=fused.lasso(cvFused$lambda.opt))
prediction_lqa <- lqa(x =testdata,family=binomial(),penalty=fused.lasso(cvFused$lambda.opt))
prediction_lqa <- lqa(class ~testdata,family=binomial(),penalty=fused.lasso(cvFused$lambda.opt))
testdata_mat <- as.matrix(testdata)
prediction_lqa <- lqa(class ~ testdata,family=binomial(),penalty=fused.lasso(cvFused$lambda.opt))
prediction_lqa <- lqa(trainlabel_lqa~traindata_lqa,family=binomial(),penalty=fused.lasso(cvFused$lambda.opt))
str(traindata_lqa)
traindata_lqa <- as.matrix(traindata_lqa)
testdata_lqa <- as.matrix(testdata_lqa)
testdata_lqa <- as.matrix(testdata)
trainlabel_lqa <- as.matrix(trainlabel_lqa)
prediction_lqa <- lqa(trainlabel_lqa~traindata_lqa,family=binomial(),penalty=fused.lasso(cvFused$lambda.opt))
model_lqa <- lqa(trainlabel_lqa~traindata_lqa,family=binomial(),penalty=fused.lasso(cvFused$lambda.opt))
predict_lqa <- predict.lqa(model_lqa, new.x = testdata_lqa)
View(testdata_lqa)
View(traindata_lqa)
model_lqa$penalty
mod_dt_1
mod_dt_1$results
print(lambdas)
print(lambdas)
cvFused=cv.lqa(trainlabel_lqa,traindata_lqa,lambda.candidates = lambdas, intercept = FALSE,
family=binomial(), penalty.family=fused.lasso ,n.fold=10,loss.func = "aic.loss")
cvFused$lambda.opt
lambda=exp (seq (-3, 3, length = 6))
print(lambda)
knit_with_parameters('C:/Users/gulsa/Desktop/2018-2019 GÃ¼z/IE582/fall18-gulsahakcakir/files/Homework_4.Rmd', encoding = 'UTF-8')
